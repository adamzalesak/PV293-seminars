// <auto-generated />
using System;
using Library.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251004203059_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Library.DataAccess.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MostPopularGenre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalBooksPublished")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Software engineer and author, known for Clean Code",
                            BirthDate = new DateTime(1952, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "USA",
                            MostPopularGenre = "Programming",
                            Name = "Robert C. Martin",
                            TotalBooksPublished = 1
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Various",
                            MostPopularGenre = "Programming",
                            Name = "Gang of Four",
                            TotalBooksPublished = 1
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Authors of The Pragmatic Programmer",
                            BirthDate = new DateTime(1965, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "USA",
                            MostPopularGenre = "Programming",
                            Name = "David Thomas & Andrew Hunt",
                            TotalBooksPublished = 1
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Genre = "Programming",
                            ISBN = "978-0132350884",
                            Pages = 464,
                            Title = "Clean Code",
                            Year = 2008
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            Genre = "Programming",
                            ISBN = "978-0135957059",
                            Pages = 352,
                            Title = "The Pragmatic Programmer",
                            Year = 2019
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Genre = "Programming",
                            ISBN = "978-0201633610",
                            Pages = 395,
                            Title = "Design Patterns",
                            Year = 1994
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Entities.Book", b =>
                {
                    b.HasOne("Library.DataAccess.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Library.DataAccess.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
